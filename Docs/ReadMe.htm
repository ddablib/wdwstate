<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!--
 * Read-me file for Window State Components
 *
 * $Rev$
 * $Date$
-->
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">

<head>

	<title>
		DelphiDabbler Window State Components ReadMe
	</title>

	<style type="text/css">
		body {
			margin: 1em;
			padding: 0;
			font-family: Verdana, Arial, sans-serif;
			font-size: 9pt;
			line-height: 150%;
		}
		h1 {
			margin: 0 0 1em 0;
			padding: 0.5em;
			border: 1px silver solid;
			background-color: #eee;
			font-size: 13pt;
			font-weight: bold;
			text-align: center;
		}
		h1 .subtitle {
			font-style: italic;
			color: #336;
		}
		h2 {
			margin: 1em 0 0 0;
			padding: 0;
			padding-bottom: 6px;
			border-bottom: 1px silver solid;
			font-size: 11pt;
			font-weight: bold;
		}
		h3 {
			margin: 0.5em 0 0 0;
			padding: 0;
			font-size: 9pt;
			font-weight: bold;
		}
		p {
			margin: 0.5em 0 0 0;
			padding: 0;
		}
		ul, ol {
			margin: 0.5em 0 0 3em;
			padding: 0;
		}
		ul {
			list-style-type: square;
		}
		ul.spaced li,
		ol.spaced li {
			margin-top: 0.5em;
		}
		ul.spaced li,
		ol.spaced li {
			margin-top: 0.5em;
		}
		ul.unspaced li,
		ol.unspaced li {
			margin-top: 0;
		}
		ul.unspaced li.first,
		ol.unspaced li.first {
			margin-top: 0.5em;
		}
		code {
			font-family: "Courier New", Courier, monospace;
		}
		a:link {
			color: #336;
			text-decoration: underline;
		}
		a:visited {
			color: #669;
			text-decoration: underline;
		}
		a:active {
			color: #336;
			text-decoration: underline;
		}
		a:hover {
			text-decoration: underline;
		}
		.gototop {
			margin: 1em 0 0 0;
			padding: 0.3em 0 0 0;
			text-align: center;
			position: relative;
			float: right;
			font-weight: bold;
		}
		.pullout {
			border-left: 8px silver solid;
			xborder-bottom: 2px silver solid;
			xborder-top: 2px silver solid;
			background-color: #eee;
			margin: 0.5em 0 0 0;
			padding: 0.25em 0.5em;
			font-style: italic;
		}
		.indent {
			margin-left: 3em;
		}
		.highlight {
			color: #336;
			font-style: italic;
			font-weight: bold;
		}
		.endnotes {
			margin: 1.5em 0 0 0;
			padding: 1em 0 0 0;
			border-top: 1px silver solid;
		}
		.comments {
			font-style: italic;
		}
		.copyright,
		.copyright a:link,
		.copyright a:visited,
		.copyright a:active {
			margin: 1em 0 0 0;
			color: gray;
			font-size: 8pt;
			text-align: right;
		}
	</style>

</head>

<body>

<h1>
	<div>Window State Components</div>
	<span class="subtitle">ReadMe</span>
</h1>


<h2 id="contents">
	Contents
</h2>

<ul>
	<li><a href="#overview">Overview</a></li>
	<li><a href="#compatibility">Compatibility</a></li>
	<li><a href="#installation">Installation</a></li>
	<li><a href="#changelog">Change log</a></li>
	<li><a href="#license">License</a></li>
	<li><a href="#author">About the Author</a></li>
</ul>


<p class="gototop">
	&raquo; <a href="#contents">Contents</a>
</p>

<h2 id="overview">
	Overview
</h2>

<p>
	The window state components can save and restore a window's size, position
	and state (minimized, maximized or normal) between program executions. Three
	components are provided that use different means of recording the window's
	information. They are:
</p>

<ul class="spaced">

	<li>
		<span class="highlight">TPJWdwState</span><br />
		This component records window information in an ini file. The user has
		control over the ini file name (via the <var>IniFileName</var> property)
		and the name of the section of the file where window information is
		recorded (using the <var>Section</var> property). Alternatively the ini
		and section names can be configured by handling the
		<var>OnGetIniData</var> event that is triggered immediately before the
		ini file is read or written.
	</li>

	<li>
		<span class="highlight">TPJRegWdwState</span><br />
		This component uses the registry to record window information. The
		registry root key and sub key where the information is stored are
		controlled by the <var>RootKey</var> and <var>SubKey</var> properties,
		or by handling the <var>OnGetRegData</var> event. This event is
		triggered just before the registry is accessed. Additional application
		defined data can be read from or written to the registry by handling the
		<var>OnGettingRegData</var> and <var>OnPuttingRegData</var> events that
		are triggered after the component reads or writes the registry.
	</li>
	
	<li>
		<span class="highlight">TPJUserWdwState</span><br />
		This component relies on the user to handle saving and reading the
		window state data to or from persistent storage. The component gives the
		most flexibility of all the components at the expense of placing the
		storage burden on the user. The component triggers <var>OnReadData</var>
		and <var>OnSaveData</var> events when ready to read or save data.
	</li>

</ul>

<p>
	All components implement the same functionality, controlled by some
	common properties and events, as follows:
</p>

<ul class="spaced">

	<li>
		The components can automatically restore and save windows when the
		program starts up and closes down (using the <var>AutoSaveRestore</var>
		property). If <var>AutoSaveRestore</var> is set to False then the
		<var>Restore</var> and <var>Save</var> methods must be called from the host
		application.
	</li>

	<li>
		The <var>Options</var> property can be used to customise the way the
		window is restored as follows:

		<ul class="unspaced">

			<li class="first">
				The components can be instructed to ignore the saved window
				state &ndash; the window is then displayed in the normal state.
			</li>

			<li>
				The window's saved size can be ignored and the default size of
				the form used instead. This is useful for dialog boxes and fixed
				size windows.
			</li>

			<li>
				The window can be kept within the current work area of the
				desktop. This option works with multiple monitors. If the form
				containing the window state component is a MDI child form this
				option keeps the window within the parent form's client area,
				after allowing for any menu, toolbars or status bar etc.
			</li>

		</ul>

	</li>

	<li>
		When the form is to be restored in a minimized state it briefly appears
		on screen in the normal state before being minimized. The
		<var>MinimizeDelay</var> property controls the delay between the window
		appearing and being minimized.
	</li>
	
</ul>

<p>
	<var>TPJWdwState</var> and <var>TPJRegWdwState</var> also support the
	<var>OnReadWdwState</var> event. Handling this event enables the stored
	window's state, size and position values before the window is restored. This
	event is called after reading the data and before sizing the window.
	<var>TPJUserWdwState</var> does not expose this event because the user is in
	charge of reading the data and can therefore modify it in the
	<var>OnReadData</var> event.
</p>

</ul>

<p>
	Other features include:
</p>

<ul class="spaced">

	<li>
		A help file that integrates into the Delphi 3 to 7 IDE. The help file
		does not integrate with Delphi 2005 and later but can be used, with some
		loss of functionality, independently of the IDE.
	</li>

	<li>
		A property editor is provided for editing the <var>RootKey</var>
		property of <var>TPJRegWdwState</var>. This editor is also available
		<a href="http://www.delphidabbler.com/software/hkeype">
		separately</a>.
	</li>

</ul>

<div class="pullout">
	<strong>Note:</strong> You can see a more detailed description of the
	components on the
	<a href="http://www.delphidabbler.com/software/wdwstate">Window State
	Components</a> web page.
</div>


<p class="gototop">
	&raquo; <a href="#contents">Contents</a>
</p>

<h2 id="compatibility">
   Compatibility
</h2>

<p>
	The current version of the Window State Components have been developed and
	tested with Delphi 7. Earlier version compiled and worked with all versions
	from Delphi 3 to Delphi 2006. The property editor can be used with any of
	the compilers supported by the components.
</p>


<p class="gototop">
	&raquo; <a href="#contents">Contents</a>
</p>

<h2 id="installation">
	Installation
</h2>

<p>
	The Window State Components, their documentation and demo programs are
	supplied in a zip file. Before installing you need to extract all the files
	from the zip file, preserving the directory structure. The following files
	will be extracted:
</p>

<ul>

	<li class="first">
		<strong><code>PJWdwState.pas</code></strong> &ndash; component source
		code.
	</li>

	<li>
		<strong><code>PJWdwState.dcr</code></strong> &ndash; resource file
		containing component palette glyphs.
	</li>

	<li>
		<code>PJWdwState.hlp</code> &ndash; component help file that integrates
		with the Delphi 3 to 7 OpenHelp system.
	</li>

	<li>
		<code>PJWdwState.als</code> &ndash; a-link keyword file for integration
		with the Delphi 6 or 7 OpenHelp system.
	</li>

	<li>
		<strong><code>PJHKEYPropEdit.pas</code></strong> &ndash; HKEY property
		editor.
	</li>

	<li>
		<code>ReadMe.htm</code> &ndash; this file.
	</li>
	
	<li>
		<code>MPL.txt</code> &ndash; the Mozilla Public License.
	</li>
	
	<li>
		<code>ChangeLog.txt</code> &ndash; component's change log.
	</li>

	<li>
		<code>Demos\DemoReadMe.htm</code> &ndash; read me file explianing use of
		demo programs.
	</li>
	
	<li>
		<code>Demos\WdwStateDemos.bpg</code> &ndash; demo project group file.
	</li>
	
	<li>
		<code>Demos\1\StandardDemo.dpr</code> &ndash; demo 1 project file.
	</li>
	
	<li>
		<code>Demos\1\StandardDemo.res</code> &ndash; icon resource for demo 1.
	</li>

	<li>
		<code>Demos\1\FmDemo.pas/.dfm</code> &ndash; 1st demo's main window form
		and source.
	</li>
	
	<li>
		<code>Demos\1\FmDemoDlg.pas/.dfm</code> &ndash; 1st demo's modal dialog
		form and source.
	</li>

	<li>
		<code>Demos\2\StandAloneDemo.dpr</code> &ndash; demo 2 project file.
	</li>

	<li>
		<code>Demos\2\StandAloneDemo.res</code> &ndash; icon resource for demo
		2.
	</li>
	
	<li>
		<code>Demos\2\FmMain.pas/.dfm</code> &ndash; 2nd demo's main window form
		and source.
	</li>
	
	<li>
		<code>Demos\3\UserDemo.dpr</code> &ndash; demo 3 project file.
	</li>

	<li>
		<code>Demos\3\UserDemo.res</code> &ndash; icon resource for demo 3.
	</li>
	
	<li>
		<code>Demos\3\FmUserDemo.pas/.dfm</code> &ndash; 3rd demo's main window
		form and source.
	</li>

	<li>
		<code>Demos\4\MDIDemo.dpr</code> &ndash; demo 4 project file.
	</li>

	<li>
		<code>Demos\4\MDIDemo.res</code> &ndash; icon resource for demo 4.
	</li>

	<li>
		<code>Demos\4\FmMDIChild.pas/.dfm</code> &ndash; 4th demo's MDI child
		form.
	</li>
	
	<li>
		<code>Demos\4\FmMDIMain.pas/.dfm</code> &ndash; 4th demo's MDI main
		form.
	</li>
	
</ul>

<p>
	You can now proceed to install the components and property editor using the
	<strong>emphasised</strong> files above. Installation methods vary between
	Delphi versions, so follow the instructions that apply to your version
	below. Note that <code><strong>$(DELPHI)</strong></code> represents the
	path where the appropriate version of Delphi was installed. Similarly
	<code><strong>$(BDS)</strong></code> refers to the installation path of a
	version of the Borland Development System.
</p>

<ul>
	<li><a href="#bds">Installation with Delphi 2005 &amp; Later</a></li>
	<li><a href="#d3">Installation with Delphi 3 to 7</a></li>
</ul>



<h3 id="bds">Installation with Delphi 2005 &amp; Later</h3>

<p>
	The components must be installed into a Delphi Win32 design package. It is
	assumed that you will be installing into an existing package. You may decide
	to install into the &quot;user&quot; package:
	<code>$(BDS)\Lib\dclusr.dpk</code>.
</p>

<ol class="spaced">

	<li>
		Decide upon a suitable location into which to install the components.
		This may be a subdirectory of your <code>Borland Studio Projects</code>
		or <code>$(BDS)\lib</code> folders.
	</li>
	
	<li>
		Copy <code>PJWdwState.pas</code> and <code>PJWdwState.dcr</code> to the
		chosen installation folder. If you wish to also install the
		<var>HKEY</var> property editor for use with <var>TPJRegWdwState</var>
		you should copy <code>PJHKEYPropEdit.pas</code> to the same location.
	</li>

	
	<li>
		Start the Development System (selecting the Delphi Win32 personality if
		appropriate) then:

		<ul>

			<li>
				Open the required package. Select <em>File | Open</em> menu and
				choose a suitable package source file.
			</li>

			<li>
				The package will now be displayed in the Project Manager with a
				<code>.bpl</code> extension. Right click the package's entry and
				select <em>Add</em> to display the <em>Add</em> dialog box.
				Enter the full path to <code>PJWdwState.pas</code> in the
				<em>Unit file name</em> edit box (use the <em>Browse</em> button
				to navigate to the file). Click <em>OK</em> to add the component
				to the package.
			</li>
			
			<li>
				If required repeat the previous step for
				<code>PJHKEYPropEdit.pas</code>.
			</li>

			<li>
				Back in the Project Manager, check that
				<code>PJWdwState.pas</code> and <code>PJWdwState.dcr</code> and,
				if appropriate, <code>PJHKEYPropEdit.pas</code>, appear under
				the package's <em>Contains</em> node. If so, right click the
				package's entry again and select <em>Compile</em>. If the
				resulting compilation succeeds a message should be displayed
				confirming that <var>TPJWdwState</var>,
				<var>TPJRegWdwState</var> and <var>TPJUserWdwState</var> have
				been registered. The components should now appear in the
				&quot;DelphiDabbler&quot; section of the Tool Palette. (Note
				this will only appear when a form is selected in the designer).
				If you have installed <code>PJHKEYPropEdit.pas</code> the
				property editor will be used by the Object Inspector when a
				property of type <var>HKEY</var> is selected.
			</li>
			
			<li>
				If the components do not appear the package may not have been
				installed. Install it from the Project Manager by selecting the
				package's <em>Install</em> right click menu option.
			</li>

			<li>
				Close the package project using the <em>File | Close</em> menu
				item. Accept any prompt that offers to save the package project.
			</li>
			
		</ul>
		
	</li>

	<li>
		If you wish you can now delete <code>PJWdwState.pas</code> and, if used,
		<code>PJHKEYPropEdit.pas</code>, from the chosen installation folder.
	</li>

	
	<li>
		The supplied help file cannot be integrated with the IDE's help system.
		However it can be used independently of the IDE, albeit with reduced
		functionality.
	</li>

	<li>
		The demo programs can be loaded into Delphi and compiled and run as
		required.
	</li>

</ol>


<h3 id="d3">Installation with Delphi 3 to 7</h3>

<p>
	The components must be installed into a design package. It is assumed that
	you will be installing into an existing package. You may wish to use the
	&quot;user&quot; package named <code>dclusr.dpk</code> or
	<code>dclusrXX.dpk</code> (where <code>XX</code> is a version number). This
	package can be found in <code>$(DELPHI)\Lib</code>. 
</p>

<ol class="spaced">

	<li>
		Decide upon a suitable location into which to install the components.
		This may be a subdirectory of your <code>$(DELPHI)\lib</code> folder.
	</li>
	
	<li>
		Copy <code>PJWdwState.pas</code> and <code>PJWdwState.dcr</code> to the
		chosen installation folder. If you wish to also install the
		<var>HKEY</var> property editor for use with <var>TPJRegWdwState</var>
		you should copy <code>PJHKEYPropEdit.pas</code> to the same location.
	</li>
	
	<li>	
		Start Delphi then:
		
		<ul>
			
			<li>
				Choose the <em>Component | Install Component</em> menu option to
				display the <em>Install Component</em> dialog box. Ensure the
				<em>Into existing package</em> tab is selected. Enter the full
				path to <code>PJWdwState.pas</code> in the <em>Unit file
				name</em> edit box (use the adjacent <em>Browse</em> button to
				navigate to the file). If required, repeat the previous step for
				<code>PJHKEYPropEdit.pas</code>. Choose the required package from the
				<em>Package description</em> combo box, or by navigating to the
				package using <em>Browse</em>. Click <em>OK</em> to confirm your
				selections. 
			</li>

			<li>
				A confirmation dialog box may displayed, querying whether it is
				OK to rebuild and reinstall the package. Click <em>Yes</em> to
				proceed.
			</li>
			
			<li>
				The package will now be built and a dialog box should be
				displayed stating that the <var>TPJWdwState</var>,
				<var>TPJRegWdwState</var> and <var>TPJUserWdwState</var>
				components have been installed. Click <em>OK</em> to dismiss the
				dialog box.
			</li>

			<li>
				The components will appear on the &quot;DelphiDabbler&quot;
				palette. If you have installed <code>PJHKEYPropEdit.pas</code>
				the property editor will be used by the Object Inspector when a
				property of type <var>HKEY</var> is selected.
			</li>

		</ul>

	</li>

	<li>
		If you wish you can now delete <code>PJWdwState.pas</code> and, if used,
		<code>PJHKEYPropEdit.pas</code>, from the chosen installation folder.
	</li>

	<li>
		The provided help file can be integrated with the IDE's OpenHelp system.
		Delphi 6 and 7 also require the use of the supplied <code>.als</code>
		file. The simplest way to install help is to use my
		<a href="http://www.delphidabbler.com/software/chi">Component Help
		Installer Expert</a> (v2.2.1 or later). If you prefer to install
		manually,
		<a href="http://www.delphidabbler.com/articles?article=15">this
		article</a> explains the process.
	</li>

	<li>
		The demo program can be loaded into Delphi and compiled and run as
		required. <span class="highlight">Please note</span> that the first
		demo does not compile or run with Delphi 3.
	</li>

</ol>



<p class="gototop">
	&raquo; <a href="#contents">Contents</a>
</p>

<h2 id="changelog">
	Change log
</h2>

<p>
	A complete change log is provided in a text file that is included in the
	download.
</p>


<p class="gototop">
	&raquo; <a href="#contents">Contents</a>
</p>

<h2 id="license">
	License
</h2>

<p>
	This source code is subject to the Mozilla Public License Version 1.1 (the
	&quot;License&quot;); you may not use this program except in compliance
	with the License. You may obtain a copy of the License at
	<a href="http://www.mozilla.org/MPL/.">http://www.mozilla.org/MPL/</a>.
</p>

<p>
	Software distributed under the License is distributed on an &quot;AS
	IS&quot; basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
	See the License for the specific language governing rights and limitations
	under the License.
</p>

<p>
	The Original Code is Window State Components.
</p>

<p>
	The Initial Developer of the Original Code is Peter Johnson
	(<a href="http://www.delphidabbler.com/">http://www.delphidabbler.com/)</a>.
</p>

<p>
	Portions created by the Initial Developer are Copyright &copy; 1999-2007
	Peter Johnson. All Rights Reserved.
</p>

<p>
	Contributor(s):
</p>

<div class="indent">
	Stefan Winter<br />
	Enrico Bortolazzi<br />
	Bruce J Miller<br />
	Craig Symons
</div>

<p>
	All relevant trademarks are acknowledged.
</p>

<p class="pullout">
	A copy of the license is included in the download &ndash see
	<code>MPL.txt</code>.
</p>

<p class="gototop">
	&raquo; <a href="#contents">Contents</a>
</p>

<h2 id="author">
	About the Author
</h2>

<p>
	I'm Peter Johnson &ndash; a hobbyist programmer living in Ceredigion in West
	Wales,  UK, writing write mainly in Delphi. My programs and code are
	available from:
	<a href="http://www.delphidabbler.com/">http://www.delphidabbler.com/</a>.
</p>

<p>
	I can be <a href="http://www.delphidabbler.com/contact">contacted via the
	website.</a>
</p> 


<div class="endnotes">

	<div class="comments">
		Please
		<a href="http://www.delphidabbler.com/contact">
		let me know</a> if you have any comments about the components, if you
		have found a bug, or you want to suggest any updates.
	</div>

	<div class="copyright">
		This document is copyright &copy; 2005-2009, P D Johnson,
		<a href="http://www.delphidabbler.com/">
		www.delphidabbler.com</a>
	</div>

</div>

</body>

</html>